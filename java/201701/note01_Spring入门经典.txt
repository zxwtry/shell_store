第一章 POJO编程模型，轻量级容器和控制反转
第一章 主要内容
    1,  POJO产生的原因，和EJB的对比，POJO的优点
    2,  容器是什么，容器可以为所管理的组件提供的服务
    3,  轻量级容器是什么，以及如何使容器轻量化
    4,  控制反转是什么，控制反转对应用程序的重要性
    5,  控制反转和依赖注入之间的关系
    6,  依赖注入方法，Setter和构造函数注入
    7,  不同注入方法的优缺点

001 EJB的缺点 (Enterprise JavaBean)
    1,  紧耦合
        EJB规范要求组件接口和业务逻辑实现类都必须从EJB框架中扩展接口
        开发人员编写的代码和EJB框架的接口类之间产生紧耦合。
        JNDI: (Java Naming and Directory Interface)
        访问JNDI上下文，执行对象查找，满足对其他EJB和DataSource实例的依赖。
    2,  难测试
        EJB容器之外测试Session和EntityBeans几乎是不可能的。
        JNDI是依赖注入的早期形式，拉式性质(pull-based nature)
        使得单元测试期间，进行组件隔离变得非常困难。
    3,  部署EJB，耗时且易出错
        很多XML配置文件都需要手动维护。

002 POJO的优点 (Plain Old Java Objects)
    1,  编写业务简单，快速
        面向对象写业务代码。
    2,  POJO不依赖特定API或特定框架。
    3,  网络传输，不同层间传输。
    4,  集成单元测试
        无需在容器内测试框架。

003 容器(Container)
    1,  容器是一个环境。
        在这个环境中，所有的组件都被创建和装配，并且提供所需的中间件服务。
    2,  容器及其管理组件的所提供的最重要的好处：
        可插拔的体系结构
        (使用不同的实现替换容器中的组件)
    3,  容器的工作：
        创建这些组件以及所依赖的服务，并将这些组件装配到一起。
    4,  每一个专门容器为应用程序的一个特定层提供所需的服务。
        a,  Servlet容器负责创建和管理应用程序Web层的组件，
            比如Servlet, JSP, Filter。
        b,  Spring Container容器中，应用程序被创建彼此装配，
            并以一种轻量级方式提供中间件服务。

004 容器向所管理组件提供的基本服务
    1,  生命周期管理
    2,  事务管理
    3,  线程管理
    4,  程序配置
    5,  安全约束
    6,  依赖解析，组件查找
    7,  对象和资源池
    8,  组件远程访问
    9,  通过JMX之类的API管理组件
    10, 容器的扩展和定制

005 轻量级容器
    1,  一个容器(提供004上的10条服务)  IoC  Bean工厂
    2,  优点
        a,  提高代码的复用度
        b,  代码可以脱离容器
        c,  容易测试
            不启动容器的前提下进行测试(POJO)
            容易编写测试桩和驱动模块(IoC)
    3,  不需要为了依赖容器的API而编写应用程序代码
        (轻量级容器没有侵入特性)

006 控制反转
    1,  原本，组件类A自己实例化依赖组件的，管理权在自己。
        现在，组件类A的依赖组件由容器注入，管理权在容器。
        这种模式叫控制反转(Inversion of Control)(简称IoC)
    2,  IoC是任何容器都需要提供的功能之一。
    3,  IoC有两种形式：依赖查找(DL) (dependency lookup)
                       依赖注入(DI) (dependency injection)
    4,  依赖查找：
        a,  容器向器所管理组件提供回调方法
        b,  组件通过回调方法与容器进行交互，并显式获取所需依赖组件
        c,  通常使用查找上下文来访问依赖组件，及容器管理的其他资源
    5,  依赖注入：
        a,  组件提供合适的构造函数或Setter方法，以便容器注入依赖组件
        b,  随着 Spring Apolication Framework以及其他轻量级IoC框架的
            流行，DI逐渐和IoC同义
        c,  容器的任务是处理相关的配置信息，以便在运行时实例化所需的
            组件，并装配依赖组件
        d,  使用JNDI进行的显式依赖查找逐渐转变为隐式依赖注入方法。

007 依赖注入
    1,  依赖注入的基本原则：
        应用程序对象所依赖的资源或协作者，由IoC容器创建和注入。
    2,  依赖注入的优点：
        a,  程序没有依赖查找代码，容易单元测试。    
        b,  程序对容器API没有依赖，可以从一个容器移植到另一个容器。
        c,  程序不需要实现任何特殊的接口。
    3,  两种依赖注入的方法：    构造函数注入
                                Setter方法注入
    4,  构造函数注入：组件创建期间注入，线程安全
        优点：  a,  保证容器中每一个被管理的组件都处于一致状态，
                    并且在创建之后马上使用。
                b,  相比Setter方法，代码量少。
        缺点：  a,  组件创建完毕后，无法再对组件进行重新配置。
                    (除非提供对应的Setter方法)
                b,  为不同的配置选项创建多个重载构造函数
                    容易造成混乱，容易出Bug

