第01章  POJO编程模型，轻量级容器和控制反转
第01章  主要内容
    1,  POJO产生的原因，和EJB的对比，POJO的优点
    2,  容器是什么，容器可以为所管理的组件提供的服务
    3,  轻量级容器是什么，以及如何使容器轻量化
    4,  控制反转是什么，控制反转对应用程序的重要性
    5,  控制反转和依赖注入之间的关系
    6,  依赖注入方法，Setter和构造方法注入
    7,  不同注入方法的优缺点

001 EJB的缺点 (Enterprise JavaBean)
    1,  紧耦合
        EJB规范要求组件接口和业务逻辑实现类都必须从EJB框架中扩展接口
        开发人员编写的代码和EJB框架的接口类之间产生紧耦合。
        JNDI: (Java Naming and Directory Interface)
        访问JNDI上下文，执行对象查找，满足对其他EJB和DataSource实例的依赖。
    2,  难测试
        EJB容器之外测试Session和EntityBeans几乎是不可能的。
        JNDI是依赖注入的早期形式，拉式性质(pull-based nature)
        使得单元测试期间，进行组件隔离变得非常困难。
    3,  部署EJB，耗时且易出错
        很多XML配置文件都需要手动维护。

002 POJO的优点 (Plain Old Java Objects)
    1,  编写业务简单，快速
        面向对象写业务代码。
    2,  POJO不依赖特定API或特定框架。
    3,  网络传输，不同层间传输。
    4,  集成单元测试
        无需在容器内测试框架。

003 容器(Container)
    1,  容器是一个环境。
        在这个环境中，所有的组件都被创建和装配，并且提供所需的中间件服务。
    2,  容器及其管理组件的所提供的最重要的好处：
        可插拔的体系结构
        (使用不同的实现替换容器中的组件)
    3,  容器的工作：
        创建这些组件以及所依赖的服务，并将这些组件装配到一起。
    4,  每一个专门容器为应用程序的一个特定层提供所需的服务。
        a,  Servlet容器负责创建和管理应用程序Web层的组件，
            比如Servlet, JSP, Filter。
        b,  Spring Container容器中，应用程序被创建彼此装配，
            并以一种轻量级方式提供中间件服务。

004 容器向所管理组件提供的基本服务
    1,  生命周期管理
    2,  事务管理
    3,  线程管理
    4,  程序配置
    5,  安全约束
    6,  依赖解析，组件查找
    7,  对象和资源池
    8,  组件远程访问
    9,  通过JMX之类的API管理组件
    10, 容器的扩展和定制

005 轻量级容器
    1,  一个容器(提供004上的10条服务)  IoC  Bean工厂
    2,  优点
        a,  提高代码的复用度
        b,  代码可以脱离容器
        c,  容易测试
            不启动容器的前提下进行测试(POJO)
            容易编写测试桩和驱动模块(IoC)
    3,  不需要为了依赖容器的API而编写应用程序代码
        (轻量级容器没有侵入特性)

006 控制反转
    1,  原本，组件类A自己实例化依赖组件的，管理权在自己。
        现在，组件类A的依赖组件由容器注入，管理权在容器。
        这种模式叫控制反转(Inversion of Control)(简称IoC)
    2,  IoC是任何容器都需要提供的功能之一。
    3,  IoC有两种形式：依赖查找(DL) (dependency lookup)
                       依赖注入(DI) (dependency injection)
    4,  依赖查找：
        a,  容器向器所管理组件提供回调方法
        b,  组件通过回调方法与容器进行交互，并显式获取所需依赖组件
        c,  通常使用查找上下文来访问依赖组件，及容器管理的其他资源
    5,  依赖注入：
        a,  组件提供合适的构造方法或Setter方法，以便容器注入依赖组件
        b,  随着 Spring Apolication Framework以及其他轻量级IoC框架的
            流行，DI逐渐和IoC同义
        c,  容器的任务是处理相关的配置信息，以便在运行时实例化所需的
            组件，并装配依赖组件
        d,  使用JNDI进行的显式依赖查找逐渐转变为隐式依赖注入方法。

007 依赖注入
    1,  依赖注入的基本原则：
        应用程序对象所依赖的资源或协作者，由IoC容器创建和注入。
    2,  依赖注入的优点：
        a,  程序没有依赖查找代码，容易单元测试。    
        b,  程序对容器API没有依赖，可以从一个容器移植到另一个容器。
        c,  程序不需要实现任何特殊的接口。
    3,  两种依赖注入的方法：    构造方法注入
                                Setter方法注入
    4,  构造方法注入：  组件创建期间注入，线程安全
        优点：  a,  保证容器中每一个被管理的组件都处于一致状态，
                    并且在创建之后马上使用。
                b,  相比Setter方法，代码量少。
        缺点：  a,  组件创建完毕后，无法再对组件进行重新配置。
                    (除非提供对应的Setter方法)
                b,  为不同的配置选项需要创建多个重载构造方法
                    容易造成混乱，容易出Bug，尤其在存在继承和实现时候。
    5,  Setter方法注入：当一个对象被容器实例化之后就会马上调用Setter方法。
            (该注入在组件的创建或初始化阶段发生，并且在处理业务方法调用之前完成。)
            (不存在与调用这些Setter方法相关的线程问题。)
        优点：  a,  在组件创建之后可以进行重新配置。组件的依赖项可以在运行时更改。
                b,  每个Setter方法都有Getter方法，用于临时保存变量。
        缺点：  a,  不是所有所需的依赖项都可以使用前被注入，
                    使组件处于一种部分配置状态。
                b,  某些情况下，调用Setter方法的顺序可能非常重要。
                    该顺序无法在组件约定中得以表达。
                    (在创建阶段，容器提供了相关机制来探测，
                    并防止此类组件状态不一致情况出现)

008 构造方法注入 && Setter注入
    1,  首先创建一个带构造方法的组件，该构造方法贴近需求参数。
    2,  使用Setter方法注入其他的依赖项。
    3,  如果需要在运行时对组件进行重新配置，
        为特定的属性创建Setter方法。

009 中间件服务：
    每一个应用程序中都会出现的需求，这些需求独立于业务需求。
    比如事务，持久化，安全，远程处理，线程，连接池和资源池，
        缓存，验证和聚类分析。
    
第02章  使用Spring进行依赖注入
第02章  主要内容
    1,  配置并使用容器
    2,  使用不同类型的配置元数据来配置Spring容器
    3,  依赖解析
    4， 自动装配优缺点
    5,  在Spring容器中执行显示Bean查找
    6,  学习不同的Bean实例化方法
    7,  理解指定了作用域的Bean以及可用的作用域
    8,  延迟Bean创建的工作原理
    9,  理解声明周期回调
    10, 使用Bean定义配置文件来创建有条件的Bean配置

010 配置元数据
    1,  configuration metadata
    2,  指导实例化Bean和如何对Bean进行装配

011 Spring容器创建的三种方式(配置元数据)：
    1,  基于XML的配置
    2,  基于注解的配置(Spring 2.5)
    3,  基于Java的配置(Spring 3.0)

012 配置元数据划分到多个不同的文件：
    1,  beans-web.xml或ConfigurationForWeb，定义应用程序的Web层/表现层中所操作的Bean。
    2,  beans-service.xml或ConfigurationForService，定义应用程序的服务层/业务层中所操作的Bean。
    3,  beans-dao.xml或ConfigurationForDao，定义应用程序的数据访问层中所操作的Bean。
    4,  beans-config.xml或ConfigurationForConfig，定义激活几个容器特定功能所需的Bean。
    5,  beans-security.xml或ConfigurationForSecurity，定义应用程序的安全需求的Bean。

013 配置和使用容器
    1,  容器也是一个Java对象。
        在某些特定的时间点被创建允许管理应用程序的其他部分。
    2,  实例化Spring容器的方法：
        a,  在独立应用程序中，可以使用编程方法。
        b,  在Web应用程序中，使用声明方法。
            (需借助web.xml文件中一些配置来完成)
    3,  通常Spring容器和ApplicationContext同义

014 getBean单例
    1,  通过ApplicationContext的实现类实例化applicationContext
        相同的传参，返回的是不同的对象。
    2,  同一个applicationContext多次调用相同参数的getBean，
        返回的是同一个Bean。
        (虽然在基于Java的配置中，Bean内部是这样写的：
            AccountServcie accountService = new AccountService();
            return accountService;
        记住，仍然是单例。)
    
015 基于注解的配置中注解的使用：
    1， @Service和@Repository都扩展自注解
        org.springframework.stereotype.Component (@Component)
        @Service除了将一个类定义为一个Bean之外，无其他特殊含义。
        @Repository能够启用与Spring数据访问相关联的其他功能。
        默认情况下，Bean的名称就是Bean的简单类名，将首字母小写
            AccountDaoImpl 默认Bean名称 accountDaoImpl
            AccountServiceImpl 默认Bean名称 accountServiceImpl
    2,  通过@Service注解AccountServiceImpl类，该类将会通过
            <context:compent-scan base-package="....."/>
            自动扫描。
    3,  通过@Autowired注解(被自动扫描类的)setter方法
            该setter方法对应的对象也需要被下一个注解@Repository注解。
    4,  通过@Repository注解AccountDaoImpl类
    5,  被@Service和@Repository注解的是接口实现类
        被@Autowired注解的是(被自动扫描类的)setter方法
    
016 基于Java的配置中注解的使用：
    1,  使用@Configuration注解一个类，这个类是Bean配置类。
        用于创建AnnotationConfigApplicationContext
    2,  使用@Bean注解一个(Bean配置类的方法)
        public AccountService accountService() {}
        applicationContext.getBean("accountService", AccountService.class);
        
017 依赖注入---Setter注入
    1,  在Bean实例创建完毕后执行。
    2,  可以注入Bean依赖项和简单值(比如：字符串，类，枚举等)
    3,  在基于XML配置中通过使用<property>元素的ref特性指定对象Bean的引用。
        <bean id="accountService" class="step01.AccountServiceImpl"
            <property name="accountDao" ref="accountDao"/>
        </bean>
        等同于
        <bean id="accountService" class="step01.AccountServiceImpl"
            <property name="accountDao">
                <ref bean="accountDao"/>
            </property>
        </bean>
    4,  在基于XML配置中，除Bean引用之外，还可以使用元素<property>
        的value特性注入其它依赖值，比如int,boolean,String,Enum等，如下：
        <bean id="account1" class="step01.Account">
            <property name="id" value="1"/>
            <property name="ownerName" value="zxwtry"/>
                .
                .
                .
        </bean>
        (Spring尽可能多地处理必要的类型转换)
            (将Spring值"false"转换为boolean类型，并将其注入一个已锁定的属性)
            (将Spring值"10.0"转换为double类型，并将其注入一个已锁定的属性)
        (还可以添加自定义编辑器)
