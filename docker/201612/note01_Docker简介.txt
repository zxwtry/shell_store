01, Docker的历史和发展
    1,  定义：开源的容器引擎
    2,  对镜像打包封装；Docker Registry对镜像统一管理。
        构建方便快捷的"Build, Ship and Run"流程；
        统一整个开发、测试和部署的环境和流程；
        极大地减少运维成本。
    3,  轻量级虚拟化；分层镜像应用。

02, Docker系统架构
    1,  架构图：
           App         App           App        
        Bins/Libs   Bins/Libs     Bins/Libs        Docker
        ---------------------    ----------     
             Bins/Libs            Bins/Libs     Libcontainer
        ----------------------------------------------------
                    Host OS     (Cgroup/Namespace)
        ----------------------------------------------------
                    Server
    2,  Docker基于容器技术，省去Hypervisor层。
        虚拟化技术基于内核的Cgroup和Namespace技术，
        处理逻辑与内核深度融合，性能与物理机接近。
    3,  在通信上，Docker不会直接与内核交互，    
        它通过一个更底层的工具Libcontainer与内核交互。
    4,  Libcontainer是真正意义上的容器引擎，
        它通过clone系统调用直接创建容器，
        通过pivot_root系统调用进入容器，
        通过直接操作cgroupfs文件实现对资源的管控，
        而Docker本身则侧重于处理更上层的业务。
    5,  层级镜像的创新应用：
        不同的容器可以共享底层的只读镜像，
        通过写入自己特有的内容添加新的镜像层，
        新增的镜像层和下层的镜像一起又可以作为基础镜像。
        极大地提高磁盘利用率，减少内存占用。

03, Docker的功能和组件
    1,  Docker客户端
            a,  C/S架构
            b,  Linux中客户端和服务端统一在一个二进制文件中。
            c,  Docker客户端一般通过Docker command来发起请求，
                也可以通过Docker提供的一整套RESTful API来发起请求。
    2,  Docker daemon
            a,  Docker daemon可以理解成Docker Server。
                常常被称为Docker Engine
                驱动整个Docker功能的核心引擎。
            b,  Docker daemon实现的功能是接收客户端发来的请求，
                实现请求所需求的功能，针对请求返回相应的请求。
    3,  Docker容器
            a,  容器是核心内容。
            b,  功能上，Docker通过Libcontainer实现对容器生命周期的管理、
                信息的设置和查询、监控和通信等功能。
            c,  功能上，容器以镜像为基础，为镜像提供一个标准和隔离的执行环境。
            d,  概念上，容器很好实现Docker集装箱的理念。
            e,  容器可以安装任意的软件和库文件，做任意的环境配置。
            f,  开发及运维人员在转移和部署应用的时候，
                不用关心容器里面装了什么软件，也不同了解它们如何配置的。
            g,  管理容器的Docker引擎同样不关心容器里的内容，
                它只要像码头工人一样让这个容器运行起来就行，
                就像所有其它容器那样。
    4,  Docker镜像　
            a,  镜像是运行环境的静态体现，没有运行起来的"运行环境"。
            b,  相对于传统虚拟化中的ISO镜像，Docker镜像要轻量很多。
                Docker只是一个可定制的rootfs。
            c,  Docker镜像是层级的并且是可复用的。
                利用Unionfs的特性，Docker减少磁盘和内存的开销。
            d,  Docker镜像通常是通过Dockerfile来创建的，
                Dockerfile提供了镜像内容的定制，同时也体现了层级关系的建立。
            e,  Docker镜像可以通过使用docker commit这样的命令来手动
                将修改后的内容生成镜像。
    5,  Registry
            a,  Registry是一个存放镜像的仓库，通常部署在互联网服务器或云端。
            b,  Registry是中转站，将一个软件的运行环境制作成镜像并上传到Registry中；
                在异地可以从Registry下载并运行。
            c,  对Registry的操作也是Dokcer完美融合的，用户甚至不知道Registry的存在，
                只需要通过简单的Docker命令就可以实现上面的操作。

04, Docker的安装
    1,  sudo apt-get install docker.io
    2,  官方入门：https://www.docker.com/tryit/
    3,  docker + 命令 + --help
    4,  man + docker + 命令

05, Docker在LXC基础上做了什么工作
    1,  LXC的概念：
        a,  LXC用户态工具(https//github.com/lxc/lxc)
        b,  Linux Container，即内核容器技术的简称
    2,  Docker在内核容器技术(Cgroup和Namespace)的基础上，
        提供一个更高层的控制工具，该工具包含以下特性：
        a,  跨主机部署。LXC实现了"进程沙盒"和配置。
            程序的执行依赖机器的特定配置，包括网络、存储和发行版等。
            Docker则将上述相关配置进行抽象并与应用程序一同打包。
            保证在不同硬件、不同配置的机器上Docker容器中运行的程序
            和所依赖的环境及配置是一样的。
        b,  以应用为中心。优化简化规范化程序的部署过程。
        c,  自动构建。Docker提供了一套能够从源码自动构建镜像的工具。
            该工具可以灵活地使用make、maven、chef、puppet、salt、debian包、
            RPM和源码包等形式。将应用程序的依赖、构建工具和安装包都进行打包处理。
            并且，当前机器的配置不会影响镜像的构建过程。
        d,  版本管理。
            Docker提供了类似Git的版本管理功能，支持追踪镜像版本、检查版本更新、
            提交新的版本改动和回退版本等功能。镜像的版本信息中包括制作方式和
            制作者信息，因此可以从生产环境中回溯到上游开发人员。Docker同样实现
            镜像的增量上传下载功能，类似Git中的pull命令。
        e,  组件复用。
            任何容器都可以用作生成另一个组件的基础镜像。这个过程可以手动执行，
            也可以写入自动化构建的脚本。例如，可以创建一个包含Python开发环境的
            镜像，并将其作为基础镜像部署到其它使用Python环境进行开发的应用程序。
        f,  共享。
            Docker用户可以访问公共的镜像Registry，并向其中上传有用的镜像。
            Registry中包含由Docker公司维护的一些官方标准镜像。Docker Registry
            本身也是开源的，所以任何人都可以部署自己的Registry来存储并共享私有镜像。
        g,  工具生态链。
            Docker定义一些列API来定制容器的创建和部署过程并实现自动化。
            很多工具能够与Docker集成并扩展Docker的能力，包括类PaaS部署工具
            (Dokku, Deis和Flynn)、多节点编排工具(Maestro, Salt, Mesos, OpenStacknova)
            管理面板(Docker-ui, OpenStack Horizon, Shipyard)、配置管理工具
            (Chef, Puppet)、持续集成工具(Jenkins, Strider, Travis)等。
            Docker正在建立以容器为基础的工具集标准。

06, Docker容器和虚拟机之间有什么不同
    1,  容器与虚拟机是互补的。
        虚拟机是用来进行硬件资源划分。
            a,  利用了硬件虚拟化技术，例如VT-x、AMD-V或者privilege level(权限等级)
            b,  会通过hypervisor层来实现对资源的彻底孤立。
        Docker容器是操作系统级别的虚拟化。
            a,  利用内核的Cgroup和Namespace特性，此功能完全通过软件来实现。
            b,  仅仅是进程本身就可以与其它进程隔离开，不需要任何辅助。
    2,  虚拟机独占分配给自己的资源
            a,  不存在资源共享，各个虚拟机实例之间近乎完全隔离
            b,  虚拟机是重量级
            c,  会消耗非常多的资源
        Docker容器与主机共享操作内核
            a,  不同的容器之间共享部分系统资源
            b,  虚拟机是轻量级
            c,  消耗资源相对虚拟机少很多
    3,  根据需求的不同选择相应的隔离方式：
        虚拟机：资源完全隔离，不考虑资源消耗
        Docker容器：隔离线程并且需要运行大量进程实例

07, 容器技术受欢迎的原因
    1,  容器技术(容器虚拟化)，是操作系统虚拟化，属于轻量级的虚拟化技术。
    2,  容器技术已经集成到Linux内核中。
    3,  相对独立的运行环境，容器对外界的影响最小化。

08, 容器技术主要包括的内核特性：Namespace和Cgroup
    Namespace；命名空间(名字空间)，主要做访问隔离。
        a,  针对一类资源进行抽象，封装在一起提供给容器使用。
        b,  对于这类资源，因为每个容器都有自己的抽象，彼此不可见。
    Cgroup：control group的简称(控制组)，主要做资源控制。
        将一组进程放在一个进程组里，通过给这个控制组分配
        指定的可用资源。达到控制这一组线程可用资源的目的。
    Namespace和Cgroup并不是强相关的两种技术。
        用户可以根据需要单独使用它们。

09, 容器的组成：
    容器= cgroup + namespace + rootfs + 容器引擎(用户态工具)
    ***Cgroup：资源控制
    ***Namespace：访问隔离
    ***rootfs：文件系统隔离
    ***容器引擎：生命周期控制

10, 容器的创建原理：
    1,  通过clone系统调用，并传入各个Namespace对应的clone flag，
        创建了一个新的子进程，该进程拥有自己的Namespace。
        该进程拥有自己的pid, mount, user, net, ipc, uts namespce。
        代码如下：
            pid = clone(fun, stack, flags, clone_arg);
            (flags: CLONE_NEWPID | CLONE_NEWNS |
                    CLONE_NEWUSER | CLONE_NEWNET |
                    CLONE_NEWIPC | CLONE_NEWUTS | ...)
    2,  将1中产生的进程pid写入各个Cgroup子系统中，
        这样该进程可以受到相应Cgroup子系统的控制。
            echo $pid > /sys/fs/cgroup/cpu/tasks
            echo $pid > /sys/fs/cgroup/cpuset/tasks
            echo $pid > /sys/fs/cgroup/blkio/tasks
            echo $pid > /sys/fs/cgroup/memory/tasks
            echo $pid > /sys/fs/cgroup/devices/tasks
            echo $pid > /sys/fs/cgroup/freezer/tasks
    3,  fun函数由上面生成的新进程执行，该fun函数中，
        通过pivot_root系统调用，使进程进入一个新的rootfs，
        之后通过exec系统调用。在新的Namespace, Cgroup, rootfs
        中执行"/bin/bash"程序。
            fun() {
                ...
                pivot_root("path_of_rootfs/", path);
                ...
                exec("/bin/bash");
                ...
            }
    通过1,2,3操作，成功地在一个"容器"中运行了一个bash程序。 

09, Cgroup介绍---Cgroup是什么。
    1,  control group的简称，属于Linux内核提供的一个特性。
    2,  用于限制和隔离一组进程对系统资源的使用，就是做资源QoS。
        这些资源主要包括CPU，内存，block I/O和网络带宽。
    3,  Cgroup实现了一个通用的进程分组的框架。
        不同资源的具体管理则是由各个Cgroup子系统实现。
    4,  Cgroup中实现的子系统及其作用如下：
        devices：   设备权限控制。
        cpuset：    分配指定的CPU和内存节点。
        cpu：       控制CPU占用率。
        cpuacct：   统计CPU使用情况。
        memory：    限制内存的使用上限。
        freezer：   冻结(暂停)Cgroup中的进程。
        net_cls：   配合tc(traffic controller)限制网络带宽。
        net_prio：  设置进程的网络流量优先级。
        huge_tlb：  限制HugeTLB的使用。
        perf_event：允许Perf工具基于Cgroup分组做性能检测。
    5,  Cgroup出现之前，只能对一个线程做一些资源控制，
        例如通过sched_setaffinity系统调用限定一个进程的CPU亲和性。
        例如用ulimit限制一个进程的打开文件上限、栈大小等。
        例如用ulimit可以对少数资源基于用户做资源控制，
            例如限制一个用户所能创建的线程数。
    6,  Cgroup可以对进程进行任意的分组，如何分组是用户自定义的。
        例如Android的应用分为前台应用和后台应用。
        因为前台应用是直接和用户交互的，需要相应速度快，
        因此前台应用对资源的申请需要得到更多的保证。
        Android将前台应用和后台应用划分到不同的Cgroup中，
        并且对放置前台应用的Cgroup配置了较高的系统资源限制。
    (从1.6版本开始，Docker也支持ulimit)

10, Cgroup的接口和使用
    Cgroup的原生接口通过cgroupfs提供，类似于procfs和sysfs，
    是一种虚拟文件系统。
    1,  挂载cgroupfs
        命令如下：
        #mount -t cgroup -o cpuset cupset /sys/fs/cgroup/cpuset
        首先需要将cgroupfs挂载起来，这个动作一般已经在启动时
        由Linux发行版做好了。可以把cgroupfs挂载到任意一个目录上，
        不过标准的挂载点是/sys/fs/cgroup
        (实际上sysfs里面只有/sys/fs/cgroup目录，
        并且sysfs是不允许用户创建目录的，这里可以将tmpfs挂载上去，
        然后在tmpfs上创建目录)
    2,  查看cgroupfs
        #ls /sys/fs/cgroup/cpuset
			cgroup.clone_children
			cgroup.procs
			cgroup.sane_behavior
			cpuset.cpu_exclusive
			cpuset.cpus
			cpuset.effective_cpus
			cpuset.effective_mems
			cpuset.mem_exclusive
			cpuset.mem_hardwall
			cpuset.memory_migrate
			cpuset.memory_pressure
			cpuset.memory_pressure_enabled
			cpuset.memory_spread_page
			cpuset.memory_spread_slab
			cpuset.mems
			cpuset.sched_load_balance
			cpuset.sched_relax_domain_level
			notify_on_release
			release_agent
			tasks
			user 
        其中以cpuset开头的控制文件都是cpuset子系统产生的，
            其它文件则由Cgroup产生
        tasks文件记录这个Cgroup的所有进程(包括线程)，
            在系统启动后，默认没有对Cgroup做任何配置的情况下，
            cgroupfs只有一个根目录，并且系统所有的进程都在这个
            根目录中，即进程pid都在根目录的tasks文件中。
    3,  创建Cgroup
        #mkdir /sys/fs/cgroup/cpuset/child
        通过mkdir创建一个新的目录，也就创建了一个新的Cgroup
    4,  配置Cgroup
        #echo 0 > /sys/fs/cgroup/cpuset/child/cpuset.cpus
        #echo 0 > /sys/fs/cgroup/cpuset/child/cpuset.mems
        限制这个Cgroup只能在0号cpu上执行，只能在0号内存节点上分配内存。
    5,  使能Cgroup
        #echo $$ > /sys/fs/cgroup/cpuset/child/tasks
        将当前进程及子线程移动到新的Cgroup中。($$是当前进程PID)
        也可以将PID写入cgroup.procs文件，除了将当前进程及子线程移动到新的Cgroup中，
        而且会将当前进程所属的线程组也加入到新的Cgroup中。

11, Cgroup子系统介绍
    1,  cpuset子系统
        将进程和CPU核心节点内存进行绑定，避免跨核心跨节点内存的时间损失。
        cpuset.cpus，可使用的CPU(0-4,9)
        cpuset.mems，可使用的节点内存(0~1)
    2,  cpu子系统
        限制cpu访问
        a,  cpu比重分配
            cpu.shares
            假设现在两个Cgroup(c1和c2)，c1:512，c2:1024
            那么当出现cpu争抢时，c1将只有c2一半的cpu占用率。
        b,  cpu带宽限制
            cpu.cfs_peroid_us
            cpu.cfs_quota_us
            单位是微秒。
            假设cpu.cfs_peroid_us是1秒，cpu.cfs_quota_us是0.3秒
            那么在1秒之内，该Cgroup只能运行0.3秒，其余时间休眠。
        c,  cpu运行时带宽限制
            以上a和b只能限制普通进程，不能限制实时进程。
            cpu.rt_peroid_us
            cpu.rt_runtime_us
            使用方法和b相同。
    3,  cpuacct子系统
        统计各个Cgroup的cpu使用
        a,  cpuacct.stat    单位USER_HZ 1USER_HZ=0.01s
            统计这个Cgroup在用户态和内核态的使用时间
        b,  cpuacct.usage   单位纳秒
            统计这个Cgroup消耗的CPU时间
        c,  cpuacct.usage_percpu    单位纳秒
            统计这个Cgroup在各个CPU上消耗的时间，总和是cpuacct.usage
    4,  memory子系统
        限制这个Cgroup的memory使用
        a,  memory.limit_in_bytes   单位字节
            可以使用k/K m/M g/G设定。
            #echo 1G > memory.limit_in_bytes
            如果内存超出限制，内核先回收内存，如何还是超出，抛出OOM。
            并杀死Cgroup中的某个线程。
        b,  memory.memsw.limit_in_bytes 单位字节
            设定swap交换区的大小，防治Cgroup将交换区用完
            可以使用k/K m/M g/G设定。
            #echo 1G > memory.memsw.limit_in_bytes
        c,  memory.oom_control  
            如果为0，如果OOM，会将当前线程阻塞直到内存足够；
            还会给出提示，要求增加内存限额。
        d,  memory.stat
            记录memory使用情况。
    5,  blkio子系统
        限制这个Cgroup的block io使用
        a,  blkio.weight    范围 [100, 1000]
            和cpu.shares类似，在发生争抢时候，按照比例分配。
        b,  blkio.weight_device
            会覆盖blkio.weight
            #echo "8:0 100" > blkio.weight_device
            标识将该Cgroup设定block io的最低优先级
        c,  blkio.throttle.read_bps_device
            设定1MB/s的带宽
            #echo "8:0 1048576" > blkio.throttle.read_bps_device
        d,  blkio.throttle.write_bps_device
        e,  blkio.throttle.read_iops_device
        f,  blkio.throttle.write_iops_device
        (blkio有两个确定，一只支持CFQ调度器，二不管是比重分配还是上限限制，
         都只支持Direct-IO，不支持Buffered-IO)
    6,  devices子系统
        限制线程对设备的访问权限
        a,  devices.list    列出所有的设备
            a/c/b   所有设备/字符设备/块设备
            major:minor 设备号
            r/m/w   读取设备/mknod创建设备/写入设备
            "a *:* rmw" ---所有设备都可以被访问
            "c 1:3 r" --- 对1:3这个字符设备(/dev/null)只有读权限
        b,  devices.allow   允许访问
        c,  devices.deny    禁止访问
