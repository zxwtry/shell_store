01, Docker的历史和发展
    1,  定义：开源的容器引擎
    2,  对镜像打包封装；Docker Registry对镜像统一管理。
        构建方便快捷的"Build, Ship and Run"流程；
        统一整个开发、测试和部署的环境和流程；
        极大地减少运维成本。
    3,  轻量级虚拟化；分层镜像应用。

02, Docker系统架构
    1,  架构图：
           App         App           App        
        Bins/Libs   Bins/Libs     Bins/Libs        Docker
        ---------------------    ----------     
             Bins/Libs            Bins/Libs     Libcontainer
        ----------------------------------------------------
                    Host OS     (Cgroup/Namespace)
        ----------------------------------------------------
                    Server
    2,  Docker基于容器技术，省去Hypervisor层。
        虚拟化技术基于内核的Cgroup和Namespace技术，
        处理逻辑与内核深度融合，性能与物理机接近。
    3,  在通信上，Docker不会直接与内核交互，    
        它通过一个更底层的工具Libcontainer与内核交互。
    4,  Libcontainer是真正意义上的容器引擎，
        它通过clone系统调用直接创建容器，
        通过pivot_root系统调用进入容器，
        通过直接操作cgroupfs文件实现对资源的管控，
        而Docker本身则侧重于处理更上层的业务。
    5,  层级镜像的创新应用：
        不同的容器可以共享底层的只读镜像，
        通过写入自己特有的内容添加新的镜像层，
        新增的镜像层和下层的镜像一起又可以作为基础镜像。
        极大地提高磁盘利用率，减少内存占用。

03, Docker的功能和组件
    1,  Docker客户端
            a,  C/S架构
            b,  Linux中客户端和服务端统一在一个二进制文件中。
            c,  Docker客户端一般通过Docker command来发起请求，
                也可以通过Docker提供的一整套RESTful API来发起请求。
    2,  Docker daemon
            a,  Docker daemon可以理解成Docker Server。
                常常被称为Docker Engine
                驱动整个Docker功能的核心引擎。
            b,  Docker daemon实现的功能是接收客户端发来的请求，
                实现请求所需求的功能，针对请求返回相应的请求。
    3,  Docker容器
            a,  容器是核心内容。
            b,  功能上，Docker通过Libcontainer实现对容器生命周期的管理、
                信息的设置和查询、监控和通信等功能。
            c,  功能上，容器以镜像为基础，为镜像提供一个标准和隔离的执行环境。
            d,  概念上，容器很好实现Docker集装箱的理念。
            e,  容器可以安装任意的软件和库文件，做任意的环境配置。
            f,  开发及运维人员在转移和部署应用的时候，
                不用关心容器里面装了什么软件，也不同了解它们如何配置的。
            g,  管理容器的Docker引擎同样不关心容器里的内容，
                它只要像码头工人一样让这个容器运行起来就行，
                就像所有其它容器那样。
    4,  Docker镜像　
            a,  镜像是运行环境的静态体现，没有运行起来的"运行环境"。
            b,  相对于传统虚拟化中的ISO镜像，Docker镜像要轻量很多。
                Docker只是一个可定制的rootfs。
            c,  Docker镜像是层级的并且是可复用的。
                利用Unionfs的特性，Docker减少磁盘和内存的开销。
            d,  Docker镜像通常是通过Dockerfile来创建的，
                Dockerfile提供了镜像内容的定制，同时也体现了层级关系的建立。
            e,  Docker镜像可以通过使用docker commit这样的命令来手动
                将修改后的内容生成镜像。
    5,  Registry
            a,  Registry是一个存放镜像的仓库，通常部署在互联网服务器或云端。
            b,  Registry是中转站，将一个软件的运行环境制作成镜像并上传到Registry中；
                在异地可以从Registry下载并运行。
            c,  对Registry的操作也是Dokcer完美融合的，用户甚至不知道Registry的存在，
                只需要通过简单的Docker命令就可以实现上面的操作。

04, Docker的安装
    1,  sudo apt-get install docker.io
    2,  官方入门：https://www.docker.com/tryit/
    3,  docker + 命令 + --help
    4,  man + docker + 命令

05, Docker在LXC基础上做了什么工作
    1,  LXC的概念：
        a,  LXC用户态工具(https//github.com/lxc/lxc)
        b,  Linux Container，即内核容器技术的简称
    2,  Docker在内核容器技术(Cgroup和Namespace)的基础上，
        提供一个更高层的控制工具，该工具包含以下特性：
        a,  跨主机部署。LXC实现了"进程沙盒"和配置。
            程序的执行依赖机器的特定配置，包括网络、存储和发行版等。
            Docker则将上述相关配置进行抽象并与应用程序一同打包。
            保证在不同硬件、不同配置的机器上Docker容器中运行的程序
            和所依赖的环境及配置是一样的。
        b,  以应用为中心。优化简化规范化程序的部署过程。
        c,  自动构建。Docker提供了一套能够从源码自动构建镜像的工具。
            该工具可以灵活地使用make、maven、chef、puppet、salt、debian包、
            RPM和源码包等形式。将应用程序的依赖、构建工具和安装包都进行打包处理。
            并且，当前机器的配置不会影响镜像的构建过程。
        d,  版本管理。
            Docker提供了类似Git的版本管理功能，支持追踪镜像版本、检查版本更新、
            提交新的版本改动和回退版本等功能。镜像的版本信息中包括制作方式和
            制作者信息，因此可以从生产环境中回溯到上游开发人员。Docker同样实现
            镜像的增量上传下载功能，类似Git中的pull命令。
        e,  组件复用。
            任何容器都可以用作生成另一个组件的基础镜像。这个过程可以手动执行，
            也可以写入自动化构建的脚本。例如，可以创建一个包含Python开发环境的
            镜像，并将其作为基础镜像部署到其它使用Python环境进行开发的应用程序。
        f,  共享。
            Docker用户可以访问公共的镜像Registry，并向其中上传有用的镜像。
            Registry中包含由Docker公司维护的一些官方标准镜像。Docker Registry
            本身也是开源的，所以任何人都可以部署自己的Registry来存储并共享私有镜像。
        g,  工具生态链。
            Docker定义一些列API来定制容器的创建和部署过程并实现自动化。
            很多工具能够与Docker集成并扩展Docker的能力，包括类PaaS部署工具
            (Dokku, Deis和Flynn)、多节点编排工具(Maestro, Salt, Mesos, OpenStacknova)
            管理面板(Docker-ui, OpenStack Horizon, Shipyard)、配置管理工具
            (Chef, Puppet)、持续集成工具(Jenkins, Strider, Travis)等。
            Docker正在建立以容器为基础的工具集标准。
