01, Docker的历史和发展
    1,  定义：开源的容器引擎
    2,  对镜像打包封装；Docker Registry对镜像统一管理。
        构建方便快捷的"Build, Ship and Run"流程；
        统一整个开发、测试和部署的环境和流程；
        极大地减少运维成本。
    3,  轻量级虚拟化；分层镜像应用。

02, Docker系统架构
    1,  架构图：
           App         App           App        
        Bins/Libs   Bins/Libs     Bins/Libs        Docker
        ---------------------    ----------     
             Bins/Libs            Bins/Libs     Libcontainer
        ----------------------------------------------------
                    Host OS     (Cgroup/Namespace)
        ----------------------------------------------------
                    Server
    2,  Docker基于容器技术，省去Hypervisor层。
        虚拟化技术基于内核的Cgroup和Namespace技术，
        处理逻辑与内核深度融合，性能与物理机接近。
    3,  在通信上，Docker不会直接与内核交互，    
        它通过一个更底层的工具Libcontainer与内核交互。
    4,  Libcontainer是真正意义上的容器引擎，
        它通过clone系统调用直接创建容器，
        通过pivot_root系统调用进入容器，
        通过直接操作cgroupfs文件实现对资源的管控，
        而Docker本身则侧重于处理更上层的业务。
    5,  层级镜像的创新应用：
        不同的容器可以共享底层的只读镜像，
        通过写入自己特有的内容添加新的镜像层，
        新增的镜像层和下层的镜像一起又可以作为基础镜像。
        极大地提高磁盘利用率，减少内存占用。

