note01: Linux/BSD系统分成3个重要部分；
    *核心(kernel)
    *Shell
    *工具程序
    相对应的关系是：
        核心非常复杂，非常难用
        Shell为核心提供良好的接口

note02: Shell根据表现形式：
    *Text base
    *Graphic base

note03: Linux/BSD的Shell种类非常多，
    可以让人自由地更换(使用chsh指令)
    目前常用的Shell有：
    sh / bash / ksh93 / pdksh / csh / tcsh
    sh : Bourne Shell         BSD/Public Domain
    Bash : Bourne Again Shell    GPL
    Bash兼容sh
    在Linux套件中，常用的是Bash

note04: Bash有两种工作模式：
    互动模式和非互动模式
    互动模式：
        interactive mode
        键盘输入命令，必须等待Shell执行完，
        才能执行下一条命令。
    非互动模式：
        Shell Script mode
        non-interactive mode
        设计Shell Script，把要执行的命令写在
        文件中，交由Bash去读取和执行。
        效率高，也称为自动化模式。

note05: Bash Shell的特性：
    *兼容 Bourne Shell (sh)
    *支持许多选项及变量，可自定义Shell的使用环境
    *支持历史命令(history)
    *命令列修订的能力，可重新取用或修改之前执行过的命令
    *具有job control的能力，可控制前台及后台程序
    *具有程序设计的能力
    *具有：普遍且免费，小(文件小)，快(免编译即可执行)，
           准(正确性高)，稳定(可重复试验)，可组合使用。。。

note06: 编写第一个Bash
    #!/bin/bash
    echo "你好 Bash Shell;" 
    保存为hello.sh
    添加执行权限: chmod +x hello.sh
    ./hello.sh回车之后，就能看到结果

note07: 第一个有用的Bash Shell
    cp /dev/null /var/log/apache2/access.log
    利用特殊文件/dev/null(只写文件)，清空apache2的日志文件(文件大小变成0，但文件仍然存在)
    然后 chomod +x /root/cleanlog.sh
    crontab -u root -e
    接着，在vi中填入：
    0 6 * * * /root/clearlog.sh
    那么每天凌晨6时，就会执行clearlog.sh，自动清理log文件。

note08: 在Linux平台部署Bash Linux的环境
    查看SHELL的支持：echo $SHELL
    一般会有 /bin/Bash或者在Ubuntu中/bin/bash
    ls -la /bin/sh
    一般可以看到 /bin/sh是一个link，链接到 /bin/sh --> Bash
    在Ubuntu 14.04中是 /bin/sh --> dash
    只要在.sh文件中指定 #!/bin/bash就行了。

note09: 自行编译最新版本的Bash
    1,  下载Bash的最新版本：http://ftp.gnu.org/gnu/bash/
    2,  下载到的是一个bash-x.x.x.tar.gz文件
    3,  解压 tar -zxvf bash-x.x.x.tar.gz
    4,  进入目录，执行设定。
        ./configure 会将bash安装到/usr/local目录下
        也可以使用 --prefix知道要安装的路径
        ./configure --prefix=/home/zxwtry
    5,  编译
        make
    6,  测试
        make tests
        先执行看看：
        ./bash
        echo $BASH_VERSION
        接着，离开新编译的bash (即执行exit)，回到原来的环境
    7,  安装(注意root和user用户)
        (user可以之前4使用--prefix进行安装，user安装之后，只能是user使用)
        make install
        或者使用
        su -c "make install"
        (make install默认会把bash的执行文件安装在/usr/local/bin中)
        (如果之前4进行了--prefix指定的话，就在自定义的目录) 

note10: 切换使用新版本的Bash Shell
    对应的命令是：chsh命令(即change Shell的简称)
    chsh会检查/etc/Shells这个文件，只有列在该文件中的Shell程序
    ，才算是合法的Shell，才能供使用者选用。
    编辑/etc/Shells文件，在最后添加/usr/local/bin/bash
    或者 echo '/usr/local/bin/bahs' >> /etc/Shells (注意：>会删除文件之前的东西)
    或者 su -c "echo '/usr/local/bin/bash' >> /etc/Shells"
    使用者自行切换： chsh --> 输入密码 --> 输入 /usr/local/bin/bash 
    root帮忙切换： chsh zxwtry  --> 输入 /usr/local/bin/bash
    
note11: 登录主机：分为本机登录(local login)和远程登录(remote login)        
    区分：使用网络登录的就是远程登录

note12: 本机登录的接口：文本接口和图形接口
    在Linux/BSD系统，默认会开启7个终端界面即：tty1 ~ tty7
    其中，文本接口的主机登录，占用tty1 ~ tty6
          图形接口的主机登录，占用tty7
    如果需要在各终端之间切换，可按Ctrl+Alt+F1 ~~~ Ctrl+Alt+F7
    
note13: 远程登录：ssh和telnet等程序来登录，其中openssh是有加密编码
    ssh -l zxwtry 192.168.1.2
    ssh zxwtry@192.168.1.2
    ssh 192.168.1.2 (等同于 ssh -l root 192.168.1.2)

note14: 注销主机、结束终端程序
    exit 或者 Ctrl + D (先ctrl 后 d)

note15: 不同文件形态的代码，表现如下：
    -   一般文件
    d   目录文件
    l   符号链接文件
    b   磁盘设备文件
    c   字符设备文件
    s   Socket文件
    p   连接文件
    其中：一般文件-：纯文本文件，二进制文件，可执行文件等等
          目录d：包含文件的活页夹
          设备文件；字符文件b、磁盘文件c
          内部进程通信文件：Socket文件s、连接文件p(Pipe/FIFO)
          连接文件也是一种内部进程通信的机制：
            一个进程把数据写入Pipe中
            另一个进程则由Pipe读取数据
            数据采FIFO的次序，成为管道
          特殊文件：符号链接文件。
            符号链接文件称为soft link或symbolic link
          有的文件以.开头，表示是隐藏文件，隐藏文件可以是如上任何一种文件。

note16: file的用法
    file /tc/resolv.conf
        执行的结果是：/etc/resolv.conf:ASCII text
        这表示，resolv.conf是一个纯文件文件，属于一般文件
    file /usr/bin
        执行的结果是：/usr/bin:directory
        这表示，/usr/bin是一个目录
    file /usr/bin/ssh
        执行的结果是：/usr/bin/ssh: ELF 64-bit LSB  shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=2f6aacfa7c26a98a02ce2a846cb03f753be0271d, stripped
        这表示，/usr/bin/ssh是一个二进制文件，具有可执行的特点
    file hello.sh
        执行的结果是：code001_print_hello_Bash.sh: Bourne-Again shell script, UTF-8 Unicode text executable
        这表示，hello.sh是一个Bash Script文件，具有可执行的特点
    file /dev/tty
        执行的结果是：/dev/tty1: character special
        这表示：/dev/tty1 是一个字符设备文件
    file /dev/sda
        执行的结果是：/dev/sda: block special
        这表示：/dev/sda是一个磁盘设备文件
    file /dev/initctl
        执行的结果是：/dev/initctl: fifo(named pipe)
        这表示，/dev/initctl是一个连接文件
    file /var/run/mysqld/mysqld.sock
        执行的结果是：/var/run/mysqld/mysqld.sock: socket
        这表示，/var/run/mysqld/mysqld.sock是一个socket文件
    file /bin/sh
        执行的结果是：/bin/sh:symbolic link to "bash"
        这表示，/bin/sh是一个链接到/bin/bash的符号链接文件
    
note17: 文件权限
    UNIX-like系统，将文件模式，分成3种身份、4种权限
    3种身份是：
        u:  自己(user)，即文件的拥有者
        g:  和自己同一组的人(group)
        o:  其他人(other)
        而a代表所有人   
    每种身份皆有4种可能的权限：
        r:  读取权限
        w:  写入权限
        x:  执行权限
        s:  特殊权限  set user id(s)、set group id(s)及sticky bits(t)，简称sst
    UNIX-like系统用10个字符来表示文件模式，如下所示：   
    文件形态 文件拥有者权限 隶属组权限 其他身份的权限
       -        rwx             rwx     rwx
    r --- 4     w --- 2     x --- 1
    如果某一个文件执行时，执行者可以暂时变成"文件拥有者"的身份，则称为具有特殊权限
        set user id，其权限组rwx则改用rws来表示。这种文件，会在原权限值(假定0755)
        之前加上4000，记为4755
        /usr/bin/chsh文件拥有者的权限记为rws，这表示使用者执行chsh时，可暂时用root
        身份来变更login Shell的种类
    如果一个文件执行时，执行者可以暂时变成"用户组"的身份，则称为拥有特殊权限
        set group id，其权限组r-x改用r-s表示，这种文件会在原文件的权限值 (假定0755)
        之前加上2000，记为2755
    如果某一个目录，其中的文件只有文件拥有者才能删除，则称该目录具有特殊权限
        seticky bit，其权限组记为rwt。这种文件会在原权限值(假定0755)之前加上1000
        记为1755
        某个文件drwxrwxrwt(1777)，表示该文件可被其他用户新建文件，读取文件，执行文件
        但是只有文件的建立者才能删除自己建立的文件。
    需要特别小心目录的权限组，以rwx来说，其中x对目录而言不是执行的意义，而是
        可以进入该目录的权限。例如，/var/www的目录属性如下：
        drwx------ 8 www-data www-data 4096 2016-10-16 22:23 /var/www
        这表示，只有执行身份同于www-data的账号，才能进入/var/www这个目录


        
    
