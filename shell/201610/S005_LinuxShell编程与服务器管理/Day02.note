note01: 自定义环境之以一般账户的角色工作时
    Bash Shell的启动配置文件中曾提到Bash Shell的启动配置文件。
    这种机制为用户提供自定义工作环境的弹性。使用者可比较启动配置文件，
    安排方便工作的环境。
    可自定义的配置文件，如下表所示：
        文件名                  时机
        ~/.bash_profile         登录时
        ~/.bashrc               执行新shell时
        ~/.bash_logout          注销时
        (这里的~指的是家目录)
    大多数主机在开设账号后，会自动在用户家目录中建立.bash_profile和.bashrc两个文件。
    而.bash_logout一般默认没有，需由用户自己建立。
    自定义环境的主要目的是要让用户登录主机时，能拥有安全及易于执行命令的环境，项目包括：建立文件的权限、命令搜寻路径、环境变量、命令提示符、别名、喜好的比较器、显示文件使用的颜色等。
    一般在.bash_profile设定可以一体使用的命令、搜寻路径及环境变量，而把其他大部分的设定放在.bashrc。因此.bash_profile文件比较小，.bashrc则比较大。
    建议：自定义.bash_profile时，仍然依循上述惯例，让它越简单越好。
          这样不但好维护，而且不易出错。
    以下是.bash_profile的设定范例
            #设定umask
            umask 022
            #登录后，也执行一个.bashrc
            if [ -f ~/.bashrc ]; then
                . ~/.bashrc
            fi
            #设定自己专用的程序路径
            if [ -d ~/bin ]; then
                PATH=~/bin:$PATH
            fi
            #设定CVS环境
            export CVSROOT=":pserver:zxwtry@192.168.1.2:/home/zxwtry"
            #设定Java环境
            export JAVA_HOME=~/jdk/bin
            export PATH=$PATH:$JAVA_HOME
        行2，设定新建文件、目录的安全权限，分别是644及755(即用666和777各减去022)
    以下是.bashrc的设定范例：
            #判断若不是在互动模式，则不执行.bashrc
            [ -z "$PS1" ] && return
            #设定有颜色的提示
            PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
            #设定方便使用的程序别名
            alias ll='ls -alF'
            alias la='ls -A'
            alias l='ls -CF'
            #如果系统没有启用bash_completion，可在这里启用
            if [ -f /usr/share/bash-completion/bash_completion ]; then
                . /usr/share/bash-completion/bash_completion
            elif [ -f /etc/bash_completion ]; then
                . /etc/bash_completion
            fi
            #重复的命令、ls、bg、fg、exit、ps等指令，不存入历史日志文件中。
            export HISTIGNORE="&:ls:ls *:[bf]g:exit:ps *"
            #设定自己常用的目录，可用cd指令快速切换
            export CDPATH=.:~:~/docs:~/src:~/tmp:/mnt:/usr/src:/usr/lib:/usr/local
    以下是.bash_logout的设定范例
            #注销时，清空tmp目录中的所有内容
            rm -rf ~/tmp/*

note02: 自定义环境---以系统管理员的角色工作时
    系统管理员维护的环境配置文件，主要有3个：
        1,  /etc/profile
        2,  /etc/bash.bashrc
        3,  /etc/skel 目录下所有文件
    前两个文件的用途，在Bash Shell的启动配置文件中已经说明。
    /etc/profile和/etc/bash.bashrc的设定，会影响所有账号的使用环境，因此，要特别小心。
    在/etc/profile中，通常会做如下设定：umask, PATH, 多国语言环境, 提示符号, 别名等等。
    bash.bashrc的内容，大多如下：
        [ -f /etc/profile ] && . /etc/profile
        这表明，当执行交互式的Shell时会检查/etc/profile是否存在，若存在，就执行它。这样的做法，等于是让管理员只要维护一份全局的/etc/profile配置文件即可。
    除了这两个文件，/etc/skel这个目录也很重要。它的作用是，当管理员开设新账户时，账号管理程序会把/etc/skel中的所有文件复制一份放到家目录中，作为用户的环境文件。
    
note03: 数组
    bash数组，其元素的个数没有限制，数组的索引由0开始，但不一定要连续，(可以跳号)。
    索引号也可以用算术表达式表示，如1+2
    bash 3.x只支持一维数组(关系型数组在Bash4.0才支持) 
    用例：
			root@zxwtry:~# A[0]=1
			root@zxwtry:~# A[0]='c'
			root@zxwtry:~# A[0]="good"
			root@zxwtry:~# echo ${A[1]}
			
			root@zxwtry:~# echo ${A[0]}
			good
			root@zxwtry:~# A[3]=1
			root@zxwtry:~# echo ${B[@]}
			
			root@zxwtry:~# echo ${A[@]}
			good 1
			root@zxwtry:~# echo ${A[*]}
			good 1
			root@zxwtry:~# echo ${#A[*]}
			2
			root@zxwtry:~# echo ${#A[@]}
			2
    ${A[@]} --- 一次取出所有的元素：得到以空白隔开的东东
    ${A[*]} --- 一次取出所有的元素：得到一整个字符串


